import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;

public class User {
    private String firstName; // First Name of the user
    private String lastName;// Last Name of the user
    private String uuid;  // Unique ID assigned to User
    private byte pinHash[];  //byte array to keep the MD5 hash of the pin entered by user.
    private ArrayList<Account> accounts; // List of accounts that user has.

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public byte[] getPinHash() {
        return pinHash;
    }

    public void setPinHash(byte[] pinHash) {
        this.pinHash = pinHash;
    }

    public ArrayList<Account> getAccounts() {
        return accounts;
    }

    public void setAccounts(ArrayList<Account> accounts) {
        this.accounts = accounts;
    }

    /**
     * Create a new user
     *
     @param firstName the user's first name
     @param lastName the user's last name
     @param pin the user's account pin number
     @param theBank the Bank object that the user is a customer
     */
    public User(String firstName, String lastName, String pin, Bank theBank) {

        //Set the user name
        this.firstName = firstName;
        this.lastName = lastName;

        // Store pin's MD5 hash rather than saving the original pin, SECURITY Reasons 
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            this.pinHash = md.digest(pin.getBytes()); // take user's pin and convert it into bytes first // uske baad digest() will produce hash
        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error, Caught the NoSuchAlgorithmException");
            e.printStackTrace();
            System.exit(1);

           // throw new RuntimeException(e);
        }

        //Get a universal Unique ID for user
        this.uuid= theBank.getNewUserUUID();

        //print a message indicating that new user has been created and his details mentioned.
        System.out.println("New user "+firstName +" "+lastName +" "+ "with ID "+ this.uuid +" has been created");
// we use this.uuid and not uuid since uuid is generated by Bank object. All other parameters firstName,lastName are
        // passsed to constructor directly

        //create empty list of accounts
        this.accounts = new ArrayList<Account>();

    }

    // So the below method is an example of encapsulation. We cannot keep our ArrayList of accounts public ( security reason )
    // so better keep it private and access them using getters and setters like methods. So below thing is
    //like getters n setters. We are just adding the account using this.

    public void addAccount(Account anAcct) {
        this.accounts.add(anAcct);
    }

    public String getUUID() {
        return this.uuid;
    }

    @Override
    public String toString() {
        return "User{" +
                "firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", uuid='" + uuid + '\'' +
                ", pinHash=" + Arrays.toString(pinHash) +
                ", accounts=" + accounts +
                '}';
    }

    /**
     * Check whether the pin we got matches the user pin;
     * @param pin pin entered by the user.
     * @return boolean value if pin match returns true else false.
     */
    public boolean validate(String pin){
        try {
            // First tell the function about the MD5 algorithm ki wo use kar rahe ho
            MessageDigest md = MessageDigest.getInstance("MD5");

            //compare the hash of the pin entered by the user with the Hash of the original pin set by user.
            return MessageDigest.isEqual(md.digest(pin.getBytes()),this.pinHash);

        } catch (NoSuchAlgorithmException e) {
            System.err.println("Error, Caught the NoSuchAlgorithmException");
            e.printStackTrace();
            System.exit(1);
        }


        return false;
    }

    /**
     * Prints the summary of account that is Account number of user, the balance in account, type of account
     */
    public void printAccountsSummary() {
        System.out.println("\n\n "+this.firstName+"'s account summary ");

        for(int a=0; a<this.accounts.size();a++){
            // this loop outputs like this - >  1 ) ACC000001 1000.0 Savings
            System.out.println((a+1)+") "+ this.accounts.get(a).getSummaryLine()+" \n");
        }
        System.out.println();
    }

    public String numAccount() {
        return String.valueOf(this.accounts.size());
    }

    /**
     * Print transaction history for a particular account
     * @param acctIdx since accounts is a list,and if we want a particular account, we access its  index first
     *                one we get the index, we print the transaction for that particular index which belongs to
     *                a certain user.
     */
    public void printAccTransactionHistory(int acctIdx) {
        this.accounts.get(acctIdx).printTransactionHistory();
    }

    public double getAccBalance(int fromAcc) {
        return this.accounts.get(fromAcc).getBalance();



    }

    /**
     * Get uuid of particular account
     * @param toAcc account of which uuid is required. so from list, it finds index of this toAcc and get's uuid of that acc
     * @return uuid of particular account
     */
    public String getAcctUUID(int toAcc) {
        return this.accounts.get(toAcc).getUuid();
    }

    /**
     *
     * @param acctIdx index of the account from ArrayList<Account>
     * @param amount amount entered by user
     * @param memo memo of transaction
     */
    // add a transaction to a particular acct
    public void addAcctTransaction(int acctIdx, double amount , String memo) {
        this.accounts.get(acctIdx).addTransaction(amount,memo);

    }


}
